# Note: On a higher level, an IGUANA benchmarking config is called a Suite. A Suite contains Tasks in addition to some
# metadata about the benchmarking process. Tasks define various parameters related to the benchmarking e.g. how long
# the benchmark runs, what type of benchmark to perform etc. Each Task can contain one or more Workers.
# A Worker is the actual logical unit that is to be executed to perform the benchmarking. Workers contain the logic to
# execute the queries on the target triple store, processing the response, measuring execution time, etc.


### CONNECTION PROPERTIES ###
# This set of properties define the triple store which is target of the benchmarking process.
# 'connection.name' property is useful for identifying the triple store in the benchmarking results and it can have arbitrary value.
connection0.name = Tentris
connection0.service = http://localhost:9080/sparql
connection0.update.service = http://localhost:9080/sparql
connection0.user = 
connection0.password = 

### DATASET CONFIG ###
# Similar to the 'connection.name', 'dataset.name' is useful for identifying the dataset in the benchmarking results.
dataset0.name = SWDF

### TASK CONFIG ###
# This set of properties define the benchmarking Task to be performed.
# 'task.class' should specify one of the concrete implementations of org.aksw.iguana.tp.tasks.Task.
# Each subclass has a different implementation of how the benchmark should be performed.
# Rest of the properties are related to constructor arguments which are used to initialize
# the object of the class specified in 'task.class'.
task0.class = org.aksw.iguana.tp.tasks.impl.stresstest.Stresstest
task0x.timeLimit = 10000
task0x.queryHandler = org.aksw.iguana.tp.query.impl.InstancesQueryHandler
task0x.workers = sparql1
task0x.warmupTime = 0
task0x.warmupQueryFile =
task0.constructorArgs = task0x.timeLimit,task0x.queryHandler,task0x.workers,task0x.warmupTime,task0x.warmupQueries,task0x.warmupUpdates

### WORKER CONFIG ###
## A Worker can spawn multiple threads to do the benchmarking. 'worker.numberOfWorkers' property specifies how many threads to spawn.
## 'worker.workerClass' should specify one of the concrete implementations of org.aksw.iguana.tp.tasks.impl.stresstest.worker.Worker interface.
## 'worker.timeout' specifies the timeout for query execution.
## 'worker.queryFile' points to the file which contains the queries to use for benchmarking.
sparql1.numberOfWorkers = 1
sparql1.workerClass = org.aksw.iguana.tp.tasks.impl.stresstest.worker.impl.SPARQLWorker
sparql1.timeout = 1000
sparql1.queryFile = iguana.corecontroller/src/main/resources/swdf.txt
sparql1.fixedLatency = 0
sparql1.gaussianLatency = 0


## Finally, below properties supply the Connections, Datasets and Tasks defined above to the benchmark executor.
iguana.cc.connections = connection0
iguana.cc.datasets = dataset0
iguana.cc.tasks = task0

### PRE/POST BENCHMARK SCRIPTS ###
# Pre and post hooks will be executed respectively before and after the actual benchmark executes. These can be used
# for example to start the triple store server before benchmark starts or to clean up after the benchmark is over.
script.hook.pre=/tentris_1.0.3_clang9_libstdcxx9/start.sh
script.hook.post=/tentris_1.0.3_clang9_libstdcxx9/stop.sh
